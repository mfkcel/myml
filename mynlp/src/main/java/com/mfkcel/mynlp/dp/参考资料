https://people.cs.clemson.edu/~bcdean/dp_practice/


This site contains an old collection of practice dynamic programming problems and their animated solutions
that I put together many years ago while serving as a TA for the undergraduate algorithms course at MIT.
I am keeping it around since it seems to have attracted a reasonable following on the web.
Eventually, this animated material will be updated and incorporated into an algorithms textbook I am writing.
             -- Brian Dean

To view the solution to one of the problems below, click on its title. To view the solutions,
you'll need a machine which can view Macromedia Flash animations and which has audio output.
I have also included a short review animation on how to solve the integer knapsack problem
(with multiple copies of items allowed) using dynamic programming.

Problems:
Maximum Value Contiguous Subsequence. Given a sequence of n real numbers A(1) ... A(n),
determine a contiguous subsequence A(i) ... A(j) for which the sum of elements in the subsequence is maximized.
求实数序列中和最大的连续子序列

Making Change. You are given n types of coin denominations of values v(1) < v(2) < ... < v(n) (all integers).
 Assume v(1) = 1, so you can always make change for any amount of money C.
 Give an algorithm which makes change for an amount of money C with as few coins as possible. [on problem set 4]
找零钱问题，给出能解决问题的最少零钱


Longest Increasing Subsequence. Given a sequence of n real numbers A(1) ... A(n),
determine a subsequence (not necessarily contiguous) of maximum length in which the values
in the subsequence form a strictly increasing sequence. [on problem set 4]
求实数序列中，最长递增子序列(可以不连续)


Box Stacking. You are given a set of n types of rectangular 3-D boxes, where the i^th box has height h(i),
width w(i) and depth d(i) (all real numbers). You want to create a stack of boxes which is as tall as possible,
but you can only stack a box on top of another box if the dimensions of the 2-D base of the lower box
are each strictly larger than those of the 2-D base of the higher box. Of course, you can rotate a box
so that any side functions as its base. It is also allowable to use multiple instances of the same type of box.

Building Bridges. Consider a 2-D map with a horizontal river passing through its center.
There are n cities on the southern bank with x-coordinates a(1) ... a(n) and n cities
on the northern bank with x-coordinates b(1) ... b(n). You want to connect as many north-south pairs of cities
as possible with bridges such that no two bridges cross. When connecting cities,
you can only connect city i on the northern bank to city i on the southern bank.
(Note: this problem was incorrectly stated on the paper copies of the handout given in recitation.)

Integer Knapsack Problem (Duplicate Items Forbidden). This is the same problem as the example above,
 except here it is forbidden to use more than one instance of each type of item.


Balanced Partition. You have a set of n integers each in the range 0 ... K.
Partition these integers into two subsets such that you minimize |S1 - S2|,
where S1 and S2 denote the sums of the elements in each of the two subsets.

Edit Distance. Given two text strings A of length n and B of length m,
you want to transform A into B with a minimum number of operations of the following types: delete a character from A,
 insert a character into A, or change some character in A into a new character.
 The minimal number of such operations required to transform A into B is called the edit distance between A and B.

Counting Boolean Parenthesizations. You are given a boolean expression consisting of a string of the symbols 'true',
'false', 'and', 'or', and 'xor'. Count the number of ways to parenthesize the expression
such that it will evaluate to true. For example, there are 2 ways to parenthesize 'true and false xor true'
such that it evaluates to true.

Optimal Strategy for a Game. Consider a row of n coins of values v(1) ... v(n), where n is even.
We play a game against an opponent by alternating turns. In each turn,
a player selects either the first or last coin from the row, removes it from the row permanently,
and receives the value of the coin. Determine the maximum possible amount of money we can definitely win if we move first.



阅读材料：
    1.时间复杂度  https://www.jianshu.com/p/f4cca5ce055a
    2.Master's Theorem  http://people.csail.mit.edu/thies/6.046-web/master.pdf
    3.edit distance  https://algorithms.tutorialhorizon.com/dynamic-programming-edit-distance-problem/



动态规划（ dynamic programming ）算法是解决多阶段决策过程最优化问题的一种常用方法

多阶段决策问题
多阶段决策过程，是指这样的一类特殊的活动过程，问题可以按时间顺序分解成若干相互联系的阶段，在每一个阶段都要做出决策，全部过程的决策是一个决策序列。
要使整个活动的总体效果达到最优的问题，称为多阶段决策问题。

动态规划算法的基本思想是：将待求解的问题分解成若干个相互联系的子问题，先求解子问题，然后从这些子问题的解得到原问题的解；
对于重复出现的子问题，只在第一次遇到的时候对它进行求解，并把答案保存起来，让以后再次遇到时直接引用答案，不必重新求解。
动态规划算法将问题的解决方案视为一系列决策的结果，与贪婪算法不同的是，在贪婪算法中，每采用一次贪婪准则，便做出一个不可撤回的决策；
而在动态规划算法中，还要考察每个最优决策序列中是否包含一个最优决策子序列，即问题是否具有最优子结构性质

在分析问题的解决过程中，如果出现大量需要重复解决的子问题，那么这时就可以考虑使用动态算法来解决避免重复计算子问题


动态规划算法的有效性依赖于待求解问题本身具有的两个重要性质：最优子结构性质和子问题重叠性质
优子结构性质：如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。
            最优子结构性质为动态规划算法解决问题提供了重要线索

子问题重叠性质：子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。
              动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，
              当再次需要计算已经计算过的子问题时，只是在表格中简 单地查看一下结果，从而获得较高的解题效率


态规划（Dynamic Programming）与分治方法相似，都是通过组合子问题的解来求解原问题。
不同的是，分治方法通常将问题划分为互不相交的子问题，递归地求解子问题，再讲它们的解组合起来，求出原问题的解。
而动态规划应用于子问题重叠的情况，即不用的子问题具有公共的子子问题。在这种情况下，如果采用分治算法，
则分治算法会做许多不必要的工作，它会反复地求解那些公共子子问题。
对于动态规划法，它对每个子子问题只求解一次，将其保存在一个表格中，从而无需每次求解一个子子问题时都重新计算，避免了这种不必要的计算工作。
也就是说，动态规划法与分治方法相比，是用空间来换时间，而时间上获得的效益是很客观的，这是一种典型的时空平衡（time-memory trade-off）的策略


在使用算法解决实际问题时，要使用数学方程的思想去看待问题
在分析问题时画出相应的图，去寻找解决问题的方案



当我们已经确定待解决的问题需要用动态规划算法求解时，通常可以按照以下步骤设计动态规划算法
1.分析问题的最优解，找出最优解的性质，并刻画其结构特征
2.递归地定义最优值
3.采用自底向上的方式计算问题的最优值
4.根据计算最优值时得到的信息，构造最优解

1 ～ 3 步是动态规划算法解决问题的基本步骤，在只需要计算最优值的问题中，完成这三个基本步骤就可以了。如果问题需要构造最优解，还要执行第 4 步；
此时，在第 3 步通常需要记录更多的信息，以便在步骤 4 中，有足够的信息快速地构造出最优解


编辑距离
Given two strings, s1 and s2 and edit operations (given below).
Write an algorithm to find minimum number operations required to convert string s1 into s2.