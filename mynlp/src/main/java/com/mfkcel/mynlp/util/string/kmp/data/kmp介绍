什么是kmp算法
kmp是一个字符串匹配算法，可以减少匹配次数。

假设我要在字符串 BBC ABCDAB ABCDABCDABDE 中找到是否包含这样的一个子串 ABCDABD

普通做法时使用子串去匹配字符串，如果对应位置相等，就把指数向后移，如果子串移动到最后一个位置也匹配时，那么就在字符串中找到了一个这样
的子串，如果最后一位不相等呢，那么子串指针又重新移动到第一位重新开始，字符串向后移动一位(在刚开始比较的地方)

在不匹配时，子串指针都移动到子串开始，这样就会重复进行比较。因为里面有一些本来已经是比较过的。

kmp算法就是改进子串比较在不相等时，应该怎么移动指针
kmp算法主要是利用了部分匹配的思想,部分匹配值存储在next指针数组中
移动位数 = 已匹配的字符数 - 对应的部分匹配值


理解kmp算法，要明白两个重要的概念：
前缀，后缀

"前缀"指除了最后一个字符以外，一个字符串的全部头部组合；"后缀"指除了第一个字符以外，一个字符串的全部尾部组合

部分匹配值"就是"前缀"和"后缀"的最长的共有元素的长度。以"ABCDABD"为例，

　　－　"A"的前缀和后缀都为空集，共有元素的长度为0；

　　－　"AB"的前缀为[A]，后缀为[B]，共有元素的长度为0；

　　－　"ABC"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；

　　－　"ABCD"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；

　　－　"ABCDA"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为"A"，长度为1；

　　－　"ABCDAB"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为"AB"，长度为2；

　　－　"ABCDABD"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。

参考：
https://www.jianshu.com/p/dcfa55a773f0
http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html

它并不是效率最高的算法也不好理解，实际采用并不多。各种文本编辑器的"查找"功能（Ctrl+F），大多采用Boyer-Moore算法。

参考如下：
    http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html